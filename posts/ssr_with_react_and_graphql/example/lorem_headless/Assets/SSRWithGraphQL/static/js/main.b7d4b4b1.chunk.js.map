{"version":3,"sources":["generated/graphql.tsx","components/Articles/Articles.tsx","components/Articles/index.tsx","components/StartPage/StartPage.tsx","components/StartPage/index.tsx","components/Breadcrumbs/Breadcrumbs.tsx","components/Breadcrumbs/index.tsx","components/ArticlePage/ArticlePage.tsx","components/ArticlePage/index.tsx","components/ContentFactory/ContentFactory.tsx","components/RouteHandler/RouteHandler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContextModelState","defaultOptions","GetArticlePageDocument","gql","GetArticlesDocument","GetBreadcrumbsDocument","GetContextModelDocument","GetStartPageDocument","Articles","articles","map","article","to","url","heading","preamble","baseOptions","options","Apollo","useGetArticlesQuery","variables","parentId","pageId","data","error","loading","StartPage","useGetStartPageQuery","id","startPage","Breadcrumbs","breadcrumbs","b","text","useGetBreadcrumbsQuery","forPageId","ArticlePage","dangerouslySetInnerHTML","__html","useGetArticlePageQuery","articlePage","ContentFactory","modelType","RouteHandler","route","useParams","useGetContextModelQuery","contextModel","App","client","Router","location","model","content","window","pathname","getLocation","ApolloProvider","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","ReactDOM","__model","hydrate","ApolloClient","uri","cache","__APOLLO_STATE","InMemoryCache","restore","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.b7d4b4b1.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type ArticlePageModelType = {\n  __typename?: 'ArticlePageModelType';\n  heading: Scalars['String'];\n  preamble: Scalars['String'];\n  text: Scalars['String'];\n  url: Scalars['String'];\n};\n\nexport type BreadcrumbType = {\n  __typename?: 'BreadcrumbType';\n  text: Scalars['String'];\n  url: Scalars['String'];\n};\n\nexport type BreadcrumbsModelType = {\n  __typename?: 'BreadcrumbsModelType';\n  breadcrumbs: Array<BreadcrumbType>;\n  name: Scalars['String'];\n};\n\nexport enum ContextModelState {\n  Found = 'FOUND',\n  NotFound = 'NOT_FOUND'\n}\n\nexport type ContextModelType = {\n  __typename?: 'ContextModelType';\n  modelType: Scalars['String'];\n  pageId: Scalars['Int'];\n  state: ContextModelState;\n  url: Scalars['String'];\n};\n\nexport type NavigationItemType = {\n  __typename?: 'NavigationItemType';\n  items?: Maybe<Array<Maybe<NavigationItemType>>>;\n  text: Scalars['String'];\n  url: Scalars['String'];\n};\n\nexport type NavigationModelType = {\n  __typename?: 'NavigationModelType';\n  accessibilityDescription: Scalars['String'];\n  closeNavigationItemLabel: Scalars['String'];\n  closeNavigationPaneLabel: Scalars['String'];\n  items?: Maybe<Array<Maybe<NavigationItemType>>>;\n  openNavigationItemLabel: Scalars['String'];\n  openNavigationPaneLabel: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  articlePage?: Maybe<ArticlePageModelType>;\n  articles: Array<ArticlePageModelType>;\n  breadcrumbs?: Maybe<BreadcrumbsModelType>;\n  contextModel?: Maybe<ContextModelType>;\n  navigation?: Maybe<NavigationModelType>;\n  startPage?: Maybe<StartPageModelType>;\n};\n\n\nexport type QueryArticlePageArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryArticlesArgs = {\n  parentId: Scalars['Int'];\n};\n\n\nexport type QueryBreadcrumbsArgs = {\n  forPageId: Scalars['Int'];\n};\n\n\nexport type QueryContextModelArgs = {\n  url: Scalars['String'];\n};\n\n\nexport type QueryNavigationArgs = {\n  fromPageId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryStartPageArgs = {\n  id: Scalars['Int'];\n};\n\nexport type StartPageModelType = {\n  __typename?: 'StartPageModelType';\n  heading: Scalars['String'];\n  preamble: Scalars['String'];\n};\n\nexport type GetArticlePageQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type GetArticlePageQuery = { __typename?: 'Query', articlePage?: Maybe<{ __typename?: 'ArticlePageModelType', heading: string, preamble: string, text: string }> };\n\nexport type GetArticlesQueryVariables = Exact<{\n  parentId: Scalars['Int'];\n}>;\n\n\nexport type GetArticlesQuery = { __typename?: 'Query', articles: Array<{ __typename?: 'ArticlePageModelType', url: string, heading: string, preamble: string }> };\n\nexport type GetBreadcrumbsQueryVariables = Exact<{\n  forPageId: Scalars['Int'];\n}>;\n\n\nexport type GetBreadcrumbsQuery = { __typename?: 'Query', breadcrumbs?: Maybe<{ __typename?: 'BreadcrumbsModelType', breadcrumbs: Array<{ __typename?: 'BreadcrumbType', text: string, url: string }> }> };\n\nexport type GetContextModelQueryVariables = Exact<{\n  url: Scalars['String'];\n}>;\n\n\nexport type GetContextModelQuery = { __typename?: 'Query', contextModel?: Maybe<{ __typename?: 'ContextModelType', pageId: number, modelType: string, state: ContextModelState }> };\n\nexport type GetStartPageQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type GetStartPageQuery = { __typename?: 'Query', startPage?: Maybe<{ __typename?: 'StartPageModelType', heading: string, preamble: string }>, articles: Array<{ __typename?: 'ArticlePageModelType', url: string, heading: string, preamble: string }> };\n\n\nexport const GetArticlePageDocument = gql`\n    query getArticlePage($id: Int!) {\n  articlePage(id: $id) {\n    heading\n    preamble\n    text\n  }\n}\n    `;\n\n/**\n * __useGetArticlePageQuery__\n *\n * To run a query within a React component, call `useGetArticlePageQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetArticlePageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetArticlePageQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetArticlePageQuery(baseOptions: Apollo.QueryHookOptions<GetArticlePageQuery, GetArticlePageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetArticlePageQuery, GetArticlePageQueryVariables>(GetArticlePageDocument, options);\n      }\nexport function useGetArticlePageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetArticlePageQuery, GetArticlePageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetArticlePageQuery, GetArticlePageQueryVariables>(GetArticlePageDocument, options);\n        }\nexport type GetArticlePageQueryHookResult = ReturnType<typeof useGetArticlePageQuery>;\nexport type GetArticlePageLazyQueryHookResult = ReturnType<typeof useGetArticlePageLazyQuery>;\nexport type GetArticlePageQueryResult = Apollo.QueryResult<GetArticlePageQuery, GetArticlePageQueryVariables>;\nexport const GetArticlesDocument = gql`\n    query getArticles($parentId: Int!) {\n  articles(parentId: $parentId) {\n    url\n    heading\n    preamble\n  }\n}\n    `;\n\n/**\n * __useGetArticlesQuery__\n *\n * To run a query within a React component, call `useGetArticlesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetArticlesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetArticlesQuery({\n *   variables: {\n *      parentId: // value for 'parentId'\n *   },\n * });\n */\nexport function useGetArticlesQuery(baseOptions: Apollo.QueryHookOptions<GetArticlesQuery, GetArticlesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetArticlesQuery, GetArticlesQueryVariables>(GetArticlesDocument, options);\n      }\nexport function useGetArticlesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetArticlesQuery, GetArticlesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetArticlesQuery, GetArticlesQueryVariables>(GetArticlesDocument, options);\n        }\nexport type GetArticlesQueryHookResult = ReturnType<typeof useGetArticlesQuery>;\nexport type GetArticlesLazyQueryHookResult = ReturnType<typeof useGetArticlesLazyQuery>;\nexport type GetArticlesQueryResult = Apollo.QueryResult<GetArticlesQuery, GetArticlesQueryVariables>;\nexport const GetBreadcrumbsDocument = gql`\n    query getBreadcrumbs($forPageId: Int!) {\n  breadcrumbs(forPageId: $forPageId) {\n    breadcrumbs {\n      text\n      url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetBreadcrumbsQuery__\n *\n * To run a query within a React component, call `useGetBreadcrumbsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetBreadcrumbsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetBreadcrumbsQuery({\n *   variables: {\n *      forPageId: // value for 'forPageId'\n *   },\n * });\n */\nexport function useGetBreadcrumbsQuery(baseOptions: Apollo.QueryHookOptions<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>(GetBreadcrumbsDocument, options);\n      }\nexport function useGetBreadcrumbsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>(GetBreadcrumbsDocument, options);\n        }\nexport type GetBreadcrumbsQueryHookResult = ReturnType<typeof useGetBreadcrumbsQuery>;\nexport type GetBreadcrumbsLazyQueryHookResult = ReturnType<typeof useGetBreadcrumbsLazyQuery>;\nexport type GetBreadcrumbsQueryResult = Apollo.QueryResult<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>;\nexport const GetContextModelDocument = gql`\n    query getContextModel($url: String!) {\n  contextModel(url: $url) {\n    pageId\n    modelType\n    state\n  }\n}\n    `;\n\n/**\n * __useGetContextModelQuery__\n *\n * To run a query within a React component, call `useGetContextModelQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetContextModelQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetContextModelQuery({\n *   variables: {\n *      url: // value for 'url'\n *   },\n * });\n */\nexport function useGetContextModelQuery(baseOptions: Apollo.QueryHookOptions<GetContextModelQuery, GetContextModelQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetContextModelQuery, GetContextModelQueryVariables>(GetContextModelDocument, options);\n      }\nexport function useGetContextModelLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetContextModelQuery, GetContextModelQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetContextModelQuery, GetContextModelQueryVariables>(GetContextModelDocument, options);\n        }\nexport type GetContextModelQueryHookResult = ReturnType<typeof useGetContextModelQuery>;\nexport type GetContextModelLazyQueryHookResult = ReturnType<typeof useGetContextModelLazyQuery>;\nexport type GetContextModelQueryResult = Apollo.QueryResult<GetContextModelQuery, GetContextModelQueryVariables>;\nexport const GetStartPageDocument = gql`\n    query getStartPage($id: Int!) {\n  startPage(id: $id) {\n    heading\n    preamble\n  }\n  articles(parentId: $id) {\n    url\n    heading\n    preamble\n  }\n}\n    `;\n\n/**\n * __useGetStartPageQuery__\n *\n * To run a query within a React component, call `useGetStartPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetStartPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetStartPageQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetStartPageQuery(baseOptions: Apollo.QueryHookOptions<GetStartPageQuery, GetStartPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetStartPageQuery, GetStartPageQueryVariables>(GetStartPageDocument, options);\n      }\nexport function useGetStartPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStartPageQuery, GetStartPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetStartPageQuery, GetStartPageQueryVariables>(GetStartPageDocument, options);\n        }\nexport type GetStartPageQueryHookResult = ReturnType<typeof useGetStartPageQuery>;\nexport type GetStartPageLazyQueryHookResult = ReturnType<typeof useGetStartPageLazyQuery>;\nexport type GetStartPageQueryResult = Apollo.QueryResult<GetStartPageQuery, GetStartPageQueryVariables>;","import { Link } from 'react-router-dom';\r\n\r\ninterface Article {\r\n    url:string,\r\n    heading:string,\r\n    preamble:string\r\n}\r\n\r\ninterface Props {\r\n    articles: Article[]\r\n}\r\n\r\nexport const Articles:React.FC<Props> = ({articles}) => {\r\n    return (\r\n        <div>\r\n            {articles.map((article) =>\r\n                <Link to={article.url}> \r\n                    <div>\r\n                        <h2>{article.heading}</h2>\r\n                        <p>{article.preamble}</p>\r\n                    </div>\r\n                </Link>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Articles;","import { Articles as Component } from './Articles';\r\nimport { gql } from '@apollo/client';\r\nimport { useGetArticlesQuery } from '../../generated/graphql';\r\n\r\nexport const GET_ARTICLES = gql`\r\n    query getArticles($parentId:Int!) {\r\n        articles(parentId: $parentId) {\r\n            url,\r\n            heading,\r\n            preamble\r\n        }\r\n    }\r\n`;\r\n\r\ninterface Props {\r\n    pageId:number\r\n}\r\n\r\nconst Articles: React.FC<Props> = ({pageId}) => {\r\n\r\n    const { data, error, loading } = useGetArticlesQuery({variables: { parentId:pageId}});\r\n\r\n    if (loading) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <Component articles={data!.articles} />\r\n    );\r\n}\r\n\r\nexport default Articles;","import Articles from '../Articles';\r\n\r\ninterface Props {\r\n    pageId:number,\r\n    heading:string,\r\n    preamble:string\r\n}\r\n\r\nexport const StartPage:React.FC<Props> = ({pageId, heading, preamble}) => {\r\n    return (\r\n        <div>\r\n            <h1>{heading}</h1>\r\n            <p>{preamble}</p>\r\n            <Articles pageId={pageId}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartPage;","import { StartPage as Component } from './StartPage';\r\nimport { gql } from '@apollo/client';\r\nimport { useGetStartPageQuery } from '../../generated/graphql';\r\n\r\nexport const GET_START_PAGE = gql`\r\n    query getStartPage($id:Int!) {\r\n        startPage(id: $id) {\r\n            heading,\r\n            preamble\r\n        },\r\n        articles(parentId: $id) {\r\n            url,\r\n            heading,\r\n            preamble\r\n        }\r\n    }\r\n`;\r\n\r\ninterface Props {\r\n    pageId:number\r\n}\r\n\r\nconst StartPage: React.FC<Props> = ({pageId}) => {\r\n\r\n    const { data, error, loading } = useGetStartPageQuery({variables: { id:pageId}});\r\n\r\n    if (loading) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <Component pageId={pageId} \r\n            heading={data!.startPage!.heading} \r\n            preamble={data!.startPage!.preamble} />\r\n    );\r\n}\r\n\r\nexport default StartPage;","import { Link } from 'react-router-dom';\r\n\r\ninterface Breadcrumb {\r\n    text:string,\r\n    url:string\r\n}\r\n\r\ninterface Props {\r\n    breadcrumbs: Breadcrumb[]\r\n}\r\n\r\nexport const Breadcrumbs:React.FC<Props> = ({breadcrumbs}) => {\r\n    return (\r\n        <div>\r\n            {breadcrumbs.map(b =>\r\n                <li><Link to={b.url}>{b.text}</Link></li>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Breadcrumbs;","import { Breadcrumbs as Component } from './Breadcrumbs';\r\nimport { gql } from '@apollo/client';\r\nimport { useGetBreadcrumbsQuery } from '../../generated/graphql';\r\n\r\nexport const GET_BREADCRUMBS = gql`\r\n    query getBreadcrumbs($forPageId:Int!) {\r\n        breadcrumbs(forPageId:$forPageId) {\r\n            breadcrumbs{\r\n              text,\r\n              url\r\n            }\r\n          }\r\n    }\r\n`;\r\n\r\ninterface Props {\r\n    pageId:number\r\n}\r\n\r\nconst StartPage: React.FC<Props> = ({pageId}) => {\r\n\r\n    const { data, error, loading } = useGetBreadcrumbsQuery({variables: { forPageId:pageId}});\r\n\r\n    if (loading) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <Component {...data!.breadcrumbs!}/>\r\n    );\r\n}\r\n\r\nexport default StartPage;","import Breadcrumbs from '../Breadcrumbs';\r\n\r\ninterface Props {\r\n    pageId:number,\r\n    heading:string,\r\n    preamble:string,\r\n    text:string\r\n}\r\n\r\nexport const ArticlePage:React.FC<Props> = ({pageId, heading, preamble, text}) => {\r\n    return (\r\n        <div>\r\n            <Breadcrumbs pageId={pageId}/>\r\n\r\n            <h1>{heading}</h1>\r\n            <p>{preamble}</p>\r\n            <div dangerouslySetInnerHTML={{__html: text}}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArticlePage;","import { ArticlePage as Component } from './ArticlePage';\r\nimport { gql } from '@apollo/client';\r\nimport { useGetArticlePageQuery } from '../../generated/graphql';\r\n\r\nexport const GET_ARTICLE_PAGE = gql`\r\n    query getArticlePage($id:Int!) {\r\n        articlePage(id: $id) {\r\n            heading,\r\n            preamble,\r\n            text\r\n        }\r\n    }\r\n`;\r\n\r\ninterface Props {\r\n    pageId:number\r\n}\r\n\r\nconst ArticlePage: React.FC<Props> = ({pageId}) => {\r\n\r\n    const { data, error, loading } = useGetArticlePageQuery({variables: { id:pageId}});\r\n\r\n    if (loading) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <Component pageId={pageId} {...data!.articlePage!} />\r\n    );\r\n}\r\n\r\nexport default ArticlePage;","import StartPage from '../StartPage';\r\nimport ArticlePage from '../ArticlePage';\r\nimport React from \"react\"\r\n\r\ninterface Props {\r\n    pageId:number,\r\n    modelType:string\r\n}\r\n\r\nconst ContentFactory: React.FC<Props> = ({pageId, modelType}) => {\r\n    \r\n    switch(modelType) {\r\n        case 'StartPage':\r\n            return <StartPage pageId={pageId} />\r\n        case 'ArticlePage':\r\n            return <ArticlePage pageId={pageId} />\r\n        default:\r\n            return <div>{`Could not find content component with modelType \"${modelType}\", add it in the ContentFactory component`}</div>\r\n    }\r\n}\r\n\r\nexport default ContentFactory","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { gql } from '@apollo/client';\r\nimport { useGetContextModelQuery } from '../../generated/graphql';\r\nimport ContentFactory from '../ContentFactory';\r\n\r\nexport const GET_MODEL_CONTEXT = gql`\r\n    query getContextModel($url:String!) {\r\n        contextModel(url: $url) {\r\n            pageId,\r\n            modelType,\r\n            state\r\n        }\r\n    }\r\n`;\r\n\r\nconst suppressFirstLoadWhenHydrated = () => {\r\n\r\n    if(typeof window !== 'undefined' && window.__model) {\r\n      delete window.__model;\r\n      return true\r\n    }\r\n  \r\n    return false;\r\n  \r\n  }\r\n\r\nconst RouteHandler: React.FC = () => {\r\n\r\n    let { route } = useParams<any>();\r\n\r\n    if(route) {\r\n        route = '/' + route;\r\n    } else {\r\n        route = '/';\r\n    }\r\n\r\n    const { data, error, loading } = useGetContextModelQuery({variables: { url: route }});\r\n\r\n    if (loading) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return(\r\n        <ContentFactory \r\n            pageId={data!.contextModel!.pageId} \r\n            modelType={data!.contextModel!.modelType} />\r\n    )\r\n}\r\n\r\nexport default RouteHandler;","import { Switch, Route } from 'react-router';\nimport RouteHandler from './components/RouteHandler'\nimport { ApolloProvider } from '@apollo/client';\n\ninterface Model {\n  content: {\n    url?:string\n  }\n}\n\ninterface Props {\n  client:any,\n  Router:any,\n  model: Model\n}\n\nconst getLocation = (model:Model) => {\n    let location = '';\n\n    if (model.content.url) {\n      location = model.content.url;\n    } else if (typeof window !== 'undefined') {\n      location = window.location.pathname;\n    }\n\n    return location;\n}\n\nconst App: React.FC<Props> = ({client, Router, model}) => {\n\n  const location = getLocation(model);\n\n  return (\n    <ApolloProvider client={client}>\n      <Router location={location}>\n        <Switch>\n            <Route key=\"/:route*\" path=\"/:route*\">\n              <RouteHandler/>\n            </Route>\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\ndeclare global {\n  interface Window {\n    __model : any,\n    __APOLLO_STATE: any; \n  }\n}\n\nlet render = ReactDOM.render;\nlet model = {\n  content: {\n  }\n}\n\nif (window.__model) {\n\trender = ReactDOM.hydrate;\n\tmodel = window.__model;\n}\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:59590/api/headless/graphql',\n  cache:window.__APOLLO_STATE ? new InMemoryCache().restore(window.__APOLLO_STATE) : new InMemoryCache(),\n});\n\nrender(\n  <React.StrictMode>\n    <App client={client} model={model} Router={BrowserRouter}  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}